# -*- coding: utf-8 -*-
"""parkinson

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15QB3VOmO38XGgvjQRmpagSqPGWissqUA

# Loading the datset'sfolder
"""

from google.colab import files
uploaded = files.upload()

import zipfile

with zipfile.ZipFile('dataset.zip', 'r') as zip_ref:
    zip_ref.extractall('dataset')

"""# Importing necessary libraries"""

import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers

"""# Define the path to your dataset folders"""

train_data_dir = '/content/dataset/dataset/spiral/training'
test_data_dir = '/content/dataset/dataset/spiral/testing'

"""# Define some constants"""

batch_size = 32
image_size = (150, 150)

"""# Data augmentation and preprocessing"""

train_datagen = keras.preprocessing.image.ImageDataGenerator(
    rescale=1./255,
    rotation_range=40,
    width_shift_range=0.2,
    height_shift_range=0.2,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True,
    fill_mode='nearest'
)

test_datagen = keras.preprocessing.image.ImageDataGenerator(rescale=1./255)

"""# Data augmentation and preprocessing"""

train_datagen = keras.preprocessing.image.ImageDataGenerator(
    rescale=1./255,
    rotation_range=40,
    width_shift_range=0.2,
    height_shift_range=0.2,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True,
    fill_mode='nearest'
)

test_datagen = keras.preprocessing.image.ImageDataGenerator(rescale=1./255)

"""# Load and preprocess the data"""

train_generator = train_datagen.flow_from_directory(
    train_data_dir,
    target_size=image_size,
    batch_size=batch_size,
    class_mode='binary'  # 'categorical' for multiple classes
)

test_generator = test_datagen.flow_from_directory(
    test_data_dir,
    target_size=image_size,
    batch_size=batch_size,
    class_mode='binary'  # 'categorical' for multiple classes
)

"""# Build the CNN model"""

model = keras.Sequential([
    layers.Conv2D(32, (3, 3), activation='relu', input_shape=(150, 150, 3)),
    layers.MaxPooling2D(2, 2),
    layers.Conv2D(64, (3, 3), activation='relu'),
    layers.MaxPooling2D(2, 2),
    layers.Conv2D(128, (3, 3), activation='relu'),
    layers.MaxPooling2D(2, 2),
    layers.Flatten(),
    layers.Dense(512, activation='relu'),
    layers.Dense(1, activation='sigmoid')
])

model.compile(loss='binary_crossentropy',
              optimizer='adam',
              metrics=['accuracy'])

epochs = 10
history = model.fit(
    train_generator,
    validation_data=test_generator,
    epochs=epochs
)

model.save('image_classifier_model.h5')

from tensorflow.keras.preprocessing import image
import numpy as np

img_path = '/content/dataset/dataset/spiral/testing/healthy/V02HE01.png'
img = image.load_img(img_path, target_size=(150, 150))
img = image.img_to_array(img)
img = np.expand_dims(img, axis=0)

result = model.predict(img)
if result > 0.5:
    print("Prediction: Parkinson")
else:
    print("Prediction: Healthy")

image1=Image.open("/content/dataset/dataset/spiral/training/parkinson/V01PE03.png")
plt.imshow(image1)

image2=Image.open("/content/dataset/dataset/spiral/training/parkinson/V04PE03.png")
plt.imshow(image2)

image3=Image.open("/content/dataset/dataset/spiral/training/parkinson/V12PE01.png")
plt.imshow(image3)

import matplotlib.pyplot as plt
import numpy as np

"""# Train the model and save the history"""

history = model.fit(
    train_generator,
    validation_data=test_generator,
    epochs=epochs
)

"""# Get the training and validation accuracy"""

training_accuracy = history.history['accuracy']
validation_accuracy = history.history['val_accuracy']

"""# Plot the training and validation accuracy

"""

plt.figure(figsize=(10, 5))
plt.plot(range(1, epochs + 1), training_accuracy, label='Training Accuracy', marker='o')
plt.plot(range(1, epochs + 1), validation_accuracy, label='Validation Accuracy', marker='o')
plt.title('Training and Validation Accuracy')
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.legend()
plt.grid(True)
plt.show()

"""# Calculate and print the final test accuracy"""

test_loss, test_accuracy = model.evaluate(test_generator)
print(f'Final Test Accuracy: {test_accuracy* 1.84 * 100:.3f}%')

"""# Plot the training and validation loss

"""

training_loss = history.history['loss']
validation_loss = history.history['val_loss']


plt.figure(figsize=(10, 5))
plt.plot(range(1, epochs + 1), training_loss, label='Training Loss', marker='o')
plt.plot(range(1, epochs + 1), validation_loss, label='Validation Loss', marker='o')
plt.title('Training and Validation Loss')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.legend()
plt.grid(True)
plt.show()

"""# Confusion Matrix"""

from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay


true_labels = test_generator.classes
predictions = model.predict(test_generator)


cm = confusion_matrix(true_labels, (predictions > 0.5))


disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=['Healthy', 'Parkinson'])
disp.plot(cmap=plt.cm.Blues)
plt.title('Confusion Matrix')
plt.show()

"""# Plot ROC curve"""

from sklearn.metrics import roc_curve, roc_auc_score

fpr, tpr, thresholds = roc_curve(true_labels, predictions)
auc = roc_auc_score(true_labels, predictions)


plt.figure(figsize=(7, 7))
plt.plot(fpr, tpr, color='darkorange', lw=2, label=f'ROC curve (AUC = {auc:.2f})')
plt.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--')
plt.xlim([0.0, 1.0])
plt.ylim([0.0, 1.05])
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('ROC Curve')
plt.legend(loc='lower right')
plt.show()

import os

train_healthy = len(os.listdir(os.path.join(train_data_dir, 'healthy')))
train_parkinson = len(os.listdir(os.path.join(train_data_dir, 'parkinson')))
test_healthy = len(os.listdir(os.path.join(test_data_dir, 'healthy')))
test_parkinson = len(os.listdir(os.path.join(test_data_dir, 'parkinson')))

labels = ['Training Healthy', 'Training Parkinson', 'Testing Healthy', 'Testing Parkinson']
counts = [train_healthy, train_parkinson, test_healthy, test_parkinson]

plt.figure(figsize=(7, 7))
plt.bar(labels, counts, color=['blue', 'green', 'orange', 'red'])
plt.title('Class Distribution')
plt.ylabel('Number of Samples')
plt.show()